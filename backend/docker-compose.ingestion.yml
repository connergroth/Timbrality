# Docker Compose for Timbre Data Ingestion Service
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: timbre
      POSTGRES_USER: timbre
      POSTGRES_PASSWORD: timbre_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/enhanced_schema.sql:/docker-entrypoint-initdb.d/01_schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timbre"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Timbre Ingestion Service
  timbre-ingestion:
    build:
      context: .
      dockerfile: Dockerfile.ingestion
    environment:
      # Database Configuration
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      
      # API Keys
      LASTFM_API_KEY: ${LASTFM_API_KEY}
      LASTFM_USERNAME: ${LASTFM_USERNAME}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Pipeline Configuration
      MAX_SONGS: ${MAX_SONGS:-10000}
      SCRAPE_CONCURRENCY: ${SCRAPE_CONCURRENCY:-4}
      SCRAPE_DELAY_SEC: ${SCRAPE_DELAY_SEC:-2}
      BATCH_SIZE: ${BATCH_SIZE:-50}
      DB_BATCH_SIZE: ${DB_BATCH_SIZE:-2000}
      
      # Rate Limiting
      SPOTIFY_RATE_LIMIT: ${SPOTIFY_RATE_LIMIT:-100}
      LASTFM_RATE_LIMIT: ${LASTFM_RATE_LIMIT:-200}
      AOTY_RATE_LIMIT: ${AOTY_RATE_LIMIT:-30}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Optional Proxy
      AOTY_PROXY_URL: ${AOTY_PROXY_URL:-}
      
    volumes:
      - ingestion_data:/app/data
      - ingestion_logs:/app/logs
      - ingestion_exports:/app/exports
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Pipeline Runner (for scheduled runs)
  timbre-pipeline-runner:
    build:
      context: .
      dockerfile: Dockerfile.ingestion
    environment:
      # Same environment as ingestion service
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      LASTFM_API_KEY: ${LASTFM_API_KEY}
      LASTFM_USERNAME: ${LASTFM_USERNAME}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      REDIS_URL: redis://redis:6379/0
      MAX_SONGS: ${MAX_SONGS:-10000}
      SCRAPE_CONCURRENCY: ${SCRAPE_CONCURRENCY:-4}
      SCRAPE_DELAY_SEC: ${SCRAPE_DELAY_SEC:-2}
      BATCH_SIZE: ${BATCH_SIZE:-50}
      DB_BATCH_SIZE: ${DB_BATCH_SIZE:-2000}
      SPOTIFY_RATE_LIMIT: ${SPOTIFY_RATE_LIMIT:-100}
      LASTFM_RATE_LIMIT: ${LASTFM_RATE_LIMIT:-200}
      AOTY_RATE_LIMIT: ${AOTY_RATE_LIMIT:-30}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      AOTY_PROXY_URL: ${AOTY_PROXY_URL:-}
    volumes:
      - ingestion_data:/app/data
      - ingestion_logs:/app/logs
      - ingestion_exports:/app/exports
    command: ["python", "scripts/run_pipeline.py", "run", "--max-songs", "${MAX_SONGS:-1000}"]
    depends_on:
      redis:
        condition: service_healthy
      timbre-ingestion:
        condition: service_healthy
    profiles:
      - pipeline  # Only start with 'docker-compose --profile pipeline up'

volumes:
  postgres_data:
  redis_data:
  ingestion_data:
  ingestion_logs:
  ingestion_exports:

networks:
  default:
    name: timbre-ingestion